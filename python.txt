Application Areas of Python

1. Web Application Developement
API Application 
Desktop GUI Application Development
DATA Analysis 
AI
Web Scrapping and text processing
Selenuim testing with Python
Automation

Why Python is Popular

Python is easy to learn because of its simple syntaxes
Many Modules(Pre-defined and third party) roughly we have 147K modules
Code lenght is very short because of third party modules
Platform Independent (one script can be used on Win/Linux)
Supports both Functional and Oops concepts


Course Structure

Core Python (basics of Python,Modules,Libraries,packages and Functions)
Advanced Python(Oops)


What is python
Python is a powerful multi-purpose programming language created by Guido van Rossum

Python versions
There are two types of version
2.x
3.x (most of the output is object)

latest version as if now is 3.7.3 to this day

major difference between the two versions would be discussed later.


Installing Python on Windows

download from www.python.org

I would like to go with 3.7.0 (web-based-installer)


Installing Python on Linux

download from www.python.org

Python is already installed in Linux by Default,
so while installing python : do not remove/change the existing python
download source tar ball (copy the url)
#wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz
#tar -xvzf python37
To compile python
Install the dependencies

yum install gcc openssl-devel bzip2-devel libffi-devel
#cd Python37
# ./configure --prefix=/home/abraham/ # path to install
by default python installs at /usr/local/bin

Compile the Source Code
#make
#make altinstall # installation
cd /usr/local/bin
./python3.7 --version
which python3.7
echo $PATH # check the path for /usr/local/bin
create a soft link to make 3.7 to 3
#ln -s python3.7 python3
#ln -s pip3.7 pip3


Editors for Python

IDLE (Integrated Development Environment)
VI/VIM
PyCharm
Spyder
PyDev
Atom
Sublime Text

*****************************************************************************************************
Session one :  Basics of Python


First script

print("hello") # anything inside the quatation is a string

Indentation:
indent: space

Indentations are used  to represent a block of code

print("This is a script")
if 3 > 1 :
    print("print 1")
    print("print 2")


special Characters
write special chahs only inside of quotes 
\n new line
\b Back space # print("hello \bworld")
\ escape # print("python\'s class") or ("This is \"python" ")

printing windows path
print("C:\\Users\\abraham.billa\\Desktop\\New_lap\\PYTHON")

\t tab # print("hello \tworld")
\a alert sound



WORKING with Variables


What is Variable
A reserved memory location to store values, 
x=2
print(x)
print(type(x))
NOte: Dont write quotes around the vairable name


re-declare Variable 
x=3
print(x)

Delete variable
x=10
print(10
del x

Rules to Define Variable
1. contains letters numbers and underscores
2. not a keyword (ex: if, for, print, )
3. No space in the variables
4. Do not start the Variable from Numbers
5. case sensitive
java_version=
install_package="java"


Data Types
Every value in Python has a data type
since everything is an object in python progrramming , data types are actually classes and variables are instance(object) of these
classes.

Basic Data types are:
1. Numbers(float, int and complex)
2. Strings
3. Boolean

x=3;y=5.6;z=3+4j
print(x,y,z)

x=3
y=5.6
z=3+4j
print(x,type(x))
print(y,type(y))
print(z,type(z))


lan_name="python - scripting" (this is a string )
print(lan_name)

Boolean
my_value=True
My_new_value=False

print(my_name,type(my_value))
print(my_new_name,type(my_new_value))


memory location 
x=5
print(id(x))



Type conversion

x=56
print(x,type(x))
y=str(x)
print(y,type(y))

z=bool(x)
print(z,type(z)))
p=0
print(p,type(p))
q=bool(p)
print(q,type(q))

x=5.6
print(int(x)

my_name="python"
print(my_name,type(my_name))

Any data Type can be converted into boolean
bool(empty)=False= bool(0),bool(None),bool([]),bool(()),bool({})
bool(non-empty)=True

Any data type can be converted into a string but the reverse is not always true.


Print with Variables and Strings

x=3
y=5.7
my_name="python-scripting"
print(x)
print("{} {} {}".format(x,y,my_name))  or print(f"{x} {y} {my_name}")
print("{} \n{} \n{}".format(x,y,my_name))

print(f"x value is: {x} \ny value is :{y} \nlast variable is : {my_name}")

my_required=print(f"x value is: {x} \ny value is :{y} \nlast variable is : {my_name}")
print(my_required)

Input and Output Statements and Usage of eval Function

#!/usr/bin/python
#simple arthimetic calculator

a=4
b=8
result=a+b
print(f" The addition of {a} and {b} is: {result}" )

a=input("Enter the Number")
b=input("Enter the Number")
print(f"The Value of a is: {a} and the type is : {type(a)}")

or

a=int(input("Enter the Number :"))
b=int(input("Enter the Number :"))
print(f"The Value of a is: {a} and the type is : {type(a)}")


or

a=eval(input("Enter x : "))
print(a,type(a))

for strings use "" with the value
Enter x : "Hi"
*******************************************************************************************************************************
12:03 AM 8/29/2019

				Working with Python Strings


Whatis string ?

string is a sequence of characters
A character is a symbol 
Computers do not deal with characters , they deal with numbers .Even though you may see characters on the scree,
internally it is stored and manipulated as a combination of 0's and 1's
This conversion of character to a number is called encoding and the reverse process is decoding ASCII and Unicode are some of the popular 
encoding used
In Python String is a sequenc of Unicode character.Unicode was introduced to include every character in all languages and bring uniformity in encoding.


How to create a string

my_name="Billa"
my_new_name='Augustine'
print(f' my name is: {my_name}\nmy_new_name is : {my_new_name}")

Use triple quotes for multiple lines in the code.

How to access Characters in a string

my_str=""
my_new_str=" "
print(f'{bool(my_new_str)}' )

my_fav_scripting='Python scripting'
# indexing 
my_fav_scripting='Python scripting'
print(my_fav_scripting[2])
print(my_fav_scripting[0:-1])
print(my_fav_scripting[0:6])
print(my_fav_scripting[0:]) # print all the values from 0 to last 
print(my_fav_scripting[:5]) # 

#Find Lenght of a string
my_fav_scripting=len("Python scripting")
print(f'Lenght of a string is : {my_fav_scripting}')
or 
print(len("my_fav_scripting"))

#concatenation
my_str1="python"
my_str2="scripting"
space_str=" "
my_str3=my_str1+space_str+my_str2
print(my_str3)

my_str1="python"
my_str2="scripting"
my_str3=my_str1+" "+my_str2+" "+"Tutorials"
print(my_str3)

n1="Augustine"
n2="Abraham"
n3=n1+" "+n2+" "+"Billa"
print(n3)

#CASE Conversion on Strings

my_string_lower=my_string.lower()
my_string_upper=my_string.upper()
print(my_string_lower)
print(my_string_upper)

my_string="python scripting"
x="hi"
#print(dir(x))
print(my_string.swapcase())
print(my_string.title())
print(my_string.capitalize())
print(my_string.casefold())

# Boolean Data
my_str="Python Tutorials"
#help(str)  help document
print(my_str.startswith('P'))
print(my_str.endswith('n'))
print(my_str.islower())
print(my_str.isupper())
print(my_str.istitle())
print(my_str.isspace())



# join center and zfill string operations
x="python"
y="-".join(x)
print(y)
print("*".join(x))
print("\n".join(x))
print("\t".join(x))


# Center
my_str="python"
my_new_string="python scripting"
my_str3="string operation"
print(my_str.center(20))
print(f"{my_str.center(20)}\n{my_new_string.center(20)}\n{my_str3.center(20)}")


# Strip and slit operations on Strings
x="Python"
y="    Python     "
print(x)
print(x.strip())
print(y.strip())
x="python"
print(x.strip('n'))

#!/usr/local/bin/python3
import os
t_w=os.get_terminal_size().columns
given_str=input("Enter your String : ")
print(given_str) # displays left side of the screen
print(given_str.center(122)) # displays Center of the screen
print(given_str.ljust(122))
print(given_str.rjust(122))
print(given_str.rjust(t_w))
print(given_str.rjust(122).title()) # for titles
print(given_str.rjust(t_w).title()) # for titles
[root@app1 /]#

[root@app1 /]#
#####################################################################################################################################

12:49 AM 8/31/2019

		DATA Structures of Python

my_values=[3,4,5,'python','devops']

print(my_values)
print(my_values[3])

Data Structures are used to store a collection of data
There are four built-in data structure
list []
tuples ()
Dictionary {} with key value pair
set{} # values are like list and tuples


LISTS

my_list1.sort()
print(my_list1) 
my_list1.sort(reverse=True) # reverse order
print(my_list1)

#####################################################################

			Operators

Operators are the pillars of any language
The operators can be defined as a symbol which is responsible fora  particula operation between two operands
Example + is an operators, to perform additoin operation on operands

Arthimetic Operators ( + - * / % // ** )
Assignment Operators ( = )
Comparison Operators ( > < == != >= <=   )
identity Operators
membership Operators (is not in not in)
Logical Operators ( and or not )
Bitwise Operators

#!/usr/bin/env python3
# this is Membership Operator
db_user=['db_admin','db_user','db_conf','db_read']
random_user='db_admin'
if random_user in db_user:
    print("This user is allowed to start DB")
else:
    print("This user is not allowed to start DB")


##################################################################################
1:03 PM 9/2/2019

		CONDITIONAL STATEMENTS

import os
t_w=os.get_terminal_size().columns
given_str=input("Enter the String\t:")
print(given_str)
user_option=input("Do you want to align the text: yes or no ? ")
if user_option=="yes":
    print(given_str.center(t_w).title())
    print(given_str.ljust(t_w).title())
    print(given_str.rjust(t_w).title())



usr_str=input("Enter String: ")
user_input=input("convert sitring into lower case? yes or no ?")
if user_input=="yes":
    print(usr_str.lower())


list_of_numbers=[2,4,6,8,10]
user_no = eval(input("Enter the Number :"))
if user_no in list_of_numbers:
    print("The Number is even")
else:
    print("The number is odd or does not exitst")


a=eval(input("Enter the first number: "))
b=eval(input("Enter the second number: "))
if a>b:
    print(f'{a} is greater than {b}')
elif a<b:
    print(f'{a} is less than {b}')
else:
    print(f'{a} is equal to {b}')


num=eval(input("Enter any number between 1-5 : "))
num_word={
    1:'one',
    2:'two',
    3:'Three',
    4:'Four',
    5:'Five'
}
if num in [1,2,3,4,5]:
    print(num_word.get(num))
else:
    print("Not Valid, Enter gain")
################################################################################


					FUNCTIONS 



How to Define a Function

Key word to define a function : def
A function is a block of Code for some specific operation
Functin code is re-usable

Why Function is used ?
	Code Reusability
	improve Modularity(to understand better and readablility)
Types of Functions
	Built-in Functions (ex: len,id,min,max,int,input....)
	User-Defined Functions
	


def display():
	print(This is fisrt line")
	print("This is a second line")
	return None # good practise to use return None

display()
# Rules to define functions
1.variables name should have only a-z,A-Z,0-9
2.function is Case sensitive	
3. Should not start with Number, and space
4.Underscore is accepted
5.Fucntion must be defined before calling


# Convert given Code in terms of Functions without changing ouptut

def welcome_message():
	print("Welcome to Python Scripting")
	print("Python is easy is to learn")
	return None
def known_concepts():
	print("good with Basics")
	print(This is fisrt line")
	return None
def new_concepts():
	print("This is a second line")
	return None 
welcome_message()
known_concepts()
new_concepts()

Scope of Variables
1. calling a function from another Function
def my_func1():
	print("Welcome to Function")
	mu_func2()
	return None
def func2():
	print("Thank you")
	my_func1()
	return None
my_func1()
my_func2()
# write the function always inside a function
inside function variable cannot be access from other function

def my_function1():
	#x=10 (inside a function) [local variable]
	print("Welcome to Function")
	print("x value from func1:", x)
	my_function2()
	return None
def my_function2(y):
	print("Thank you") # Parameter
	print("x value from func2:", y)
	my_function1()
	return None
x=10 # outside a function [global variable]

def main():
	#global x # not advisiable
	x=10
	myfunction1()
	myfunction2(x) # Argument
	return None
main()

Simple Functions with Arguments

read a number with increment with 10


def get_add(p,q):
    aresult=p+q
    print(f'The Addition of {p} and {q} is : {aresult}')
    return None

def get_sub(m,n):
    sresult=m-n
    print(f'Sub of {m} and {n} is : {sresult}')
    return None
def main():
    a = eval(input("Enter the first number\t:"))
    b = eval(input("Enter the second number\t:"))
    get_add(a,b)
    get_sub(b,a)
    return None
def anothermain():
    print("This is another function")
    x=5
    get_sub(10,x)
    get_sub(12,10)
    return None
main()
anothermain()


Functions with Arguments and return Value : 
def multiply_num_10(value):
    result=value*10
    return result

def main():
    num=eval(input("Enter your number: "))
    result=multiply_num_10(num)
    print(f'The result is {result} ')
main()


Functions with Default Arguments:

# Function with default value
def display(a):
    print("The Value of a is: ", a)
    return None
display(4)
display(5)

def add_numbers(a,b):
    result=a+b
    print("The result is :", result)
    return None
add_numbers(4,5)

def add_numbers1(a,b=1):
    result=a+b
    print("The result is :", result)
    return None
add_numbers1(4)

def working_on_operation(user=root)
    print(f'working with {user}')
    return None
working_on_operation()

#Functions with keyword based arguments
def display(a,b):
    print(f'a={a}')
    return None
display(3,4)

# Functions with variable lenght arguments
def display(a):
    print(type(a))
    return None
display(4)

# Functions with variable lenght arguments
def display(*data):
    print(data)
    return None
display()
display(4)
display(4,5,6)

def display(*data):
    for each in data:
        print(type(each))
    return None
display("hi", 345, 4.567)

# Functions with variable lenght keyword based arguments
def display(a,b):
    print(f'The Value of a : {a}')
    print(f'The Value of a : {b}')
    return None
display(1,3)
display(b=2,a=4)

def display(**karg):
    print(karg)
    return None
display(b=2,a=4,c=6)


def display(**karg):
    print(karg)
    return None

display(b=2,a=4,c=6)
display(x=5,y=6,path="root")

def display(p,**karg):
    print(karg)
    print(p)
    return None
display(11,x=5,y=6,path="root")
###########################################################################

Using Functions of one script into another script
calling a function from one script to another

import the script

import script1


script1 # this is script1

def addition(a,b):
    print(f'The Addition of {a} and {b} is {a+b}')
    return None
def sub(a,b):
    print(f'Substration of {a} and {b} is {a-b}')
    return None

script 2 # this is script2

def multiplication(a,b):
    print(f'multiplication of {a} and {b} is {a*b}')

using functions of script1 to script2

import script1
#print(dir(script1))
def multiplication(a,b):
    print(f'multiplication of {a} and {b} is {a*b}')
x=10
y=10
script1.addition(x,y)
script1.sub(x,y)
###########################################################################

# The new structure for Python


import sys
import os
import datetime
import time

def addition(a,b):
    print(f'The addition of {a} and {b} is : {a+b}')
    return None


def main():
    x=4
    y=5
    addition(x,y)
    #substraction(x,y)
    return None

if __name__ == '__main__':
    main()




########################################################################################## Chnage current working directory
import os,sys
def main():
    print("The Current working Dir is : ", os.getcwd())
    path=input("Enter the path to change the Dir: ")
    try:
        os.chdir(path)
        print("New Working Dir is :", os.getcwd())
    except FileNotFoundError:
        print("Please verify the path")
    except NotADirectoryError:
        print("Given path is not valid")
    except PermissionError:
        print("you do not have Access to the file")
    except Exception as e:
        print(e)
	return None
        
if __name__ == "__main__":
    main()




#####################################################################################################################################
12:10 AM 9/4/2019
			MODULES


What is a Module?
A module is a file containing Python definitions and statements, That means Module containing python functions,classes and Variables

What is the use of Modules?
Re-usability

if script name is my_module.py then the module name is my_module

Types of Python Modules
Default and Third party Modules

import math
# print(math.pi)
#help("modules")
#print(dir(math))
#print(math.pow(2,3))
print(help(math))

Different ways to import module

import math
from math import *
print(pi)
print(pow(2,3)

import math as m  # alias name for math is m
import subprocess as sp
import plat
print(m.pi)

import platform as pt # alias name for platform as pt
print(pt.system())

or 

import platfrom,math,sys,os,subprocess,psutil


platform modle is used to access the underlying platform's data such as hardware,
operating system and interpreter version info
How to use platform module in a script ?
import platform as pt or
import platform
import platform import *
import platform import system,platform
How to list all functions and variables of a platform module?
There is a built-in-function to list all the functions names dir()
print(dir(platform))
print(help(platform)



import platform
print(f' This is {platform.system()} os')
print(f'Python version is {platform.python_version()}')
print(platform.node())
print(platform.architecture())
print(platform.uname())

getpass() : prompts the user for a password without echoing. the getpass module provieds a secure wat to handle the password prompts where programs interact with the users via the terminal

getuser() : function to displays the login name of the user. This Function checks the environment variables LOGNAME,USER,LNAME and USERNAME, in order and returns the value of the first non-empty string

import getpass
# read a password
#my_password=input("enter password :")
db_pass=getpass.getpass(prompt="Enter the password :")
print(f'The Entered password is: {db_pass}')



##################################################################################3:23 AM 9/4/2019
			SYS MODULE

Inroduction to sys Module
The Sys module provides functions and vairables used to manipulate different parts of the Python runtime envrionment
dir(sys) = list of operations
help(sys)  = documentation


import sys
#print(help(sys))
print(sys.exit()) # stops the script
print(sys.version)
print(sys.path)


#sys.argv resturns a list of command line argument passwed to a python script
#!/usr/bin/env python
import sys
print(sys.argv)
print(sys.argv[0]) # just the script name
./test.py hello this command line argument


import sys
if len(sys.argv) != 3:
    print("Usage")
    print(f'{sys.argv[0]} <your string> <lower|upper|title>')
    sys.exit()
usr_str=input("Enter the string: ")
user_action=input("Enter the action on the string (valid actions are: lower/upper/title): ")
if user_action=='lower':
    print(usr_str.lower())
elif user_action=="upper":
    print(usr_str.upper())
elif user_action=="title":
    print(usr_str.title())
else:
    print("Your options are invalid")


##################################################################################
11:42 PM 9/4/2019

		OS MODULE

This Module is used to work/Interact with operating system to automate many more taks like creating dir,removing dir, identifying current directory and etc.


Four parts of OS mdule
os, os.path, os.system(), os.walk()

**************************************
os.sep # path seperator
os.getcwd() # current working dir
os.chdir("path") # change dir
os.listdir() # listing dir or print(os.chdir("/home/ab"))
os.mkdir("billa") # create dir
os.makedirs("path") # recursive directory creation function
os.removedirs("path")
os.rmdir("path")
os.rename(src,dst)
os.environ # 
os.getuid()
os.getgid()

		OS.PATH Module
os.path is a sub module of os

print(dir(os.path))
os.path.sep
os.path.basename

#!/usr/bin/env python3
import os
path='/home/vagrant'
print(os.path.basename(path))
print(os.path.dirname(path))

#!/usr/bin/env python3
import os
path1='/home'
path2='vagrant'
print(os.path.join(path1,path2))


#!/usr/bin/env python3
import os
path='/home/vagrant'
if os.path.exists(path):
    print("file exists")
else:
    print(f'{path} does not exits')

#!/usr/bin/env python3
import os
path='/home/vagrant'
if os.path.isfile(path):
    print("file exists")
else:
    print(f'{path} is a dir')



#######################################			OS.SYSTEM()
execute os commnads
os.system('pwd')
os.system('ls')
os.system('clear')

#!/usr/bin/env python3
import os
cmd="date"
rt=os.system(cmd)
if rt==0:
    print("your cmd was successfully executed")
else:
    print("your command failed")


#!/usr/bin/env python3
import os
import platform
if platform.system()=="Windows":
    os.system('cls')
else:
    os.system('clear')


os.walk(path)
ths is like a find command,

path="C:\\Users\\abraham.billa\\Desktop\\vagarant\\AUTOMATION"
print(os.walk(path))
print(list(os.walk(path)))

#############   Search File ##################


import os
req_file=input("Enter the File :")
for r,d,f in os.walk('/')
    for each_file in f:
	if each_file==req_file"
	    print(os.path.join(r,each_file))


##################################################################################
12:47 AM 9/6/2019

		subprocess


the output of the commands cannot be stored in OS module 

ex : out=os.system('dir') # we still get the output and the variable stores 0.


>>> os.system('dir')
date.py  service.py
0


>>> print(out)
0

So to aviod such situations we use subprocess module to store the vairable

import subprocess
sp=subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE,universal_newlines=True)
#sp=subprocess.Popen(cmd,shell=True/False,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
return_code=sp.wait() # capture the output if the command was success or failure
out,err=sp.communicate() # seperates the out and error 

IMP : if shell=true # commands are strings same as os commands
      if shell=False # commands are in list 

	shell=Fasle # OS environemt variables are non-opearable
	cmd='ls -ltr'.split() # easy way to spilt

print(f'OUTPUT is : {out}')
print(f'Error is : {err}')

cmd='ls -ltr'
shell=True

>>> cmd="ls -ltr"
>>> cmd.split()
['ls', '-ltr']
>>> cmd1="uptime | head"
>>> cmd1.split()
['uptime', '|', 'head']



FIND BASH VERSION

#!/usr/bin/env python3
import subprocess
cmd=['bash','--version']
sp=subprocess.Popen(cmd,shell=False,stdout=subprocess.PIPE,stderr=subprocess.PIPE,universal_newlines=True)
rc=sp.wait()
o,e=sp.communicate()
if rc==0:
    #print("The output is", o.splitlines())
    for each_line in o.splitlines():
        if "version" in each_line and "release" in each_line:
            #print(each_line.split()[3].split('(')[0])
            ver=each_line.split()[3].split('(')[0]
else:
    print("Command failed with error", e)
print(f'The Bash Version is {ver}')

FIND the LINUX VERSION

#!/usr/bin/env python
import subprocess
cmd=['cat', '/etc/redhat-release']
sp=subprocess.Popen(cmd,shell=False,stdout=subprocess.PIPE,stderr=subprocess.PIPE,universal_newlines=True)
rc=sp.wait()
o,e=sp.communicate()
if rc==0:
    for each_line in o.splitlines():
        if "CentOS" in each_line :
            print(each_line.split()[3].split('(')[0])




#############################################################11:18 PM 9/7/2019

		DATE and TIME MODULE


import datetime
print(datetime.datetime.today()) # to get the local time from the server
print(datetime.datetime.now()) # to get the time zone for other regions

#create a object to get the time zone
import pytz
ist=pytz.timezone('Asia/Kolkata')
print(datetime.datetime.now(ist))
# to get the Month and year
print(datetime.datetime.now().year)
print(datetime.datetime.now().month)
print(datetime.datetime.now().day)
print(datetime.datetime.now().hour)
print(datetime.datetime.now().minute)
print(datetime.datetime.now().second)
# to format the date with 2 digit (  http://strftime.org/ )
print(datetime.datetime.now().strftime("%y-%m-%d"))
print(datetime.datetime.now().strftime("%Y-%m-%d"))
print(datetime.datetime.now().strftime("%c"))


import datetime
import pytz
print(datetime.datetime.max)
print(datetime.datetime.fromtimestamp(903456))


# FInd the files older than x Days

#!/usr/bin/env python3
import os
import sys
import datetime
required_path=input("Enter the path :")
age=50
#dir(os.path)
if not os.path.exists(required_path):
    print("Please provide valid path")
    sys.exit(1)
if os.path.isfile(required_path):
    print("Provide dir path")
    sys.exit(2)
today=datetime.datetime.now()
for each_file in os.listdir(required_path):
    each_file_path=os.path.join(required_path,each_file)
    if os.path.isfile(each_file_path):
        file_creation_date=datetime.datetime.fromtimestamp(os.path.getctime(each_file_path))
        #print(each_file_path,today-file_creation_date)
        diff_days=(today-file_creation_date).days
        if diff_days > age:
            #print(each_file_path,(today-file_creation_date).days)
            print(each_file_path,diff_days)




#############################################################
1:28 AM 9/9/2019

		LOOPS : Execute a block of code multiple times

path is always a string

Why Loops:
All Programming languages need a way to execute block of code many a times, this possible with loops.

Python has two loops:
for loop
while loop

for Loop: The For loop in python is used to iterate over a sequence (list, tuple, string ) or other iterable objects

While Loop : used to execute a block of statements repeatedly until a given condition is satisfied.

The While loop is used to iterate over a block of code as long as the test expression/condition is true



my_list=[10,2,45,33,24,65,44,29]
for each_no in my_list:
    reminder=each_no%2
    if reminder == 0:
        print(f'{each_no} The number is even')
    else:
        print(f'{each_no} is Odd')


# Read the Path and checek for File and Dir

import os
path=input("Enter the Path :")
if os.path.exists(path):
    print(f'The given path {path} exists')
    if os.path.isfile(path):
        print(f"The entered path is a File : {path}")
    else:
        print("The given path is a Dir")
else:
    print(f'The given path does not exists')



LOOP to check files and Dir's

import os
import sys
path=input("Enter the Path :")
if os.path.exists(path):
    print(f"The path is Valid {path}")
else:
    print(f"The path is invalid {path}")
    sys.exit(1)
list_of_file=os.listdir(path)
for each_file in list_of_file:
    file_dir=os.path.join(path,each_file)
    #print(file_dir)
    if os.path.isfile(file_dir):
        print(f'{file_dir} is a File')
    else:
        print(f'{file_dir} is a Dir')



Read a String and print chars and index values

usr_string=input("Enter the string :")
index=0
for each_char in usr_string:
    print(f'{each_char} ---> {index}')
    index=index+1



Find all files in a directory with extensions .sh/ .py/ .txt

#!/usr/bin/env python3
import os
req_path=input("Enter the path :")
if os.path.isfile(req_path):
    print(f'The given path {req_path} is a file,Please Enter only Dir\'s')
else:
    all_files_dirs=os.listdir(req_path)
    if len(all_files_dirs)==0:
        print(f'The given path is {req_path} : EMPTY')
    else:
        req_extension=input("Enter the extension .py/ .sh/ .log/ .txt: ")
        req_files=[]
        for each_file in all_files_dirs:
            if each_file.endswith(req_extension):
                req_files.append(each_file)
        if len(req_files)==0:
            print(f'There are no {req_extension} in the location {req_path}')
        else:
            print(f'There are {len(req_files)} in the location of {req_path}')
            print(f'The list of files are: {req_files}')


# For loop for String,list,tuple and Dictionaries
my_string="Working with Loops"
print(my_string)

for each_char in my_string:
    print(each_char)
# or
print("\n".join(my_string))

my_list=[1,2,3,4,5]
for each_value in my_list:
    print(each_value)
my_tuple=[(1,2),(4,5),(6,7)]
#for each_tuple in my_tuple:  #  very important
    #print(each_tuple) # to unpack two variables in the list
for first,second in my_tuple:
    print(first,second)
my_dict={'a':1, 'b':2,'c':3}
for each_dic in my_dict: #  or for each_dic in my_dict.keys():  # both are same
    print(each_dic)
for each_dic in my_dict.values():
    print(each_dic)
# Now keys and Values
for key,value in my_dict.items():
    #print(key,value)
    print(key)

my_dic={'name':'billa','age':38,'place':'HYD'}
print('my name is', my_dic['name'], 'iam', (my_dic['age']), 'years old' )


#while loop
# To repeat a code ten times
for each in range(10):
    print("Welcome to Loops")
# To repeat the above code infinite
# import time
# while True:
#     print("Monitoring File System")
#     time.sleep(2)

cnt=1
while cnt <=5:
    print("hello")
    cnt=cnt+1


BREAK

for each in [3,5,8,9.11,14]:
    print(each)
    if each==8:
        break

CONTINUE

for each in range(1,11):
    if each == 7:
        continue
    print(each)

#####################################################################################################################################

WORKING With Text Files

open File
w open a file
a append the file
r read mode 

#create a empty file
fo=open('new_file.txt','w')

fo.close()


##########################################################################12:05 AM 9/11/2019

		REGULAR EXPRESSION

The Regex is a procedure in any language to look for a speacial pattern in a given text 

What is a pattern ?
it is a sequence of characters which represents multiple strings

ex: 'i[st]' --> is, it
	python[23] ---> python2, python3

different operations

match()
search()
findall()
finditer()
sub()
split()
compile()

Rules to Create pattern

import re
syntax:
	re.search(pattern,text)
	re.match(pattern,text)
	re.findall(pattern,text)

How to Use Findall
import re
print(re.findall(pattern,text))

import re
text="This is a scripting language and it is easy"
#my_pattern="is"
my_pattern="i[st]"
print(re.findall(my_pattern,text))



import re
text="This is for python2 and there are two major version python3 and python4 "
pat=r'\bpython[23]?\b'
match_ob=re.search(pat,text)
if match_ob:
    print("match from your pattern: ",match_ob.group())
    print('starting index :',match_ob.start())
    print('ending index :',match_ob.end()-1)
    print('lenght :', match_ob.end()-match_ob.start())
else:
    print("No match found")

#####################################################################################################################################








#####################################################################################################################################



#####################################################################################################################################




#####################################################################################################################################






#####################################################################################################################################








#####################################################################################################################################



#####################################################################################################################################




#####################################################################################################################################






#####################################################################################################################################













































































